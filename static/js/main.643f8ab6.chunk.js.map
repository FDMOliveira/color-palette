{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["imgArr","App","r","g","b","a","React","useState","colors","setcolors","loading","setLoading","lastI","compare","count","colorDiff","basePx","colorDiffArr","getImageData","img","canvas","document","getElementsByTagName","ctx","getContext","w","height","width","window","innerWidth","h","clearRect","drawImage","i","imgData","data","length","Math","pow","sqrt","newArr","Array","floor","push","sort","map","color","diff","updateArr","lastArrEl","lastRGB","currRGB","newRGB","filter","el","arr","ocurr","avRGB","className","src","onClick","event","target","crossOrigin","class","type","id","accept","onChange","file","files","reader","FileReader","image","querySelector","addEventListener","onload","result","readAsDataURL","for","data-rgb","style","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.643f8ab6.chunk.js","sourcesContent":["import React from 'react'\n\nconst imgArr = [\"https://images.pexels.com/photos/853199/pexels-photo-853199.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\",\"https://images.pexels.com/photos/1591447/pexels-photo-1591447.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\",\"https://images.pexels.com/photos/4173624/pexels-photo-4173624.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\"]\n\nfunction App () {\n  const[colors,setcolors] = React.useState([]);\n  const[loading,setLoading] = React.useState(false);\n  \n  let r, g, b, a, mostlyOpac = (70*255)/100, tolerance = 50, lastI = 0, compare = 0, count = 0, colorDiff = 0, basePx={}, colorDiffArr= [];\n   \n  const fromInput = (event) => {\n    const file = event.target.files[0],\n          reader = new FileReader(),\n          image = document.querySelector(\".img\");\n      \n    setLoading(true);\n    reader.addEventListener(\"load\", function () {\n      image.onload = function () {\n         getImageData(image);\n      }\n      image.src = reader.result;\n    }, false);\n\n    if (file) \n      reader.readAsDataURL(file);\n    \n  }\n  const getImageData = (img) => {\n    let canvas = document.getElementsByTagName(\"canvas\")[0],\n        ctx = canvas.getContext(\"2d\"),\n        w = img.height > img.width ? 0.2 * window.innerWidth : 0.3 * window.innerWidth,\n        h = (img.height * w) / img.width;\n    \n    canvas.width = w;\n    canvas.height = h;\n    \n    ctx.clearRect(0, 0, w, h);\n    ctx.drawImage(img, 0, 0, w, h);\n    let imgData = ctx.getImageData(0, 0, w, h);\n        \n    var i;\n    for (i = 0; i < imgData.data.length; i += 4) {\n        r = imgData.data[i];\n        g = imgData.data[i+1];\n        b = imgData.data[i+2];\n        a = imgData.data[i+3];\n        basePx = count === 0 ? {r,g,b} : basePx;\n      \n        if (count> 0 && a > mostlyOpac) {\n              // Euclidean Distance\n              colorDiff = Math.pow(r - basePx.r,2) + Math.pow(g - basePx.g,2) + Math.pow(b - basePx.b,2);\n              colorDiff = Math.sqrt(colorDiff);\n              let newArr = new Array();\n              newArr[0] = Math.floor(colorDiff);\n              newArr[1] = {r,g,b};\n              newArr[2] = 1;\n              colorDiffArr.push(newArr);\n        }\n        count++;\n    }\n    colorDiffArr.sort((a,b) => {\n      if (a[0] < b[0])\n          return -1;\n      if (a[0] > b[0])\n          return 1\n      return 0\n    });\n    colorDiffArr.map((color,i, colorDiffArr) => {\n      let diff = Math.floor(color[0]),\n          updateArr = new Array();\n      if (i > 0) {\n        if (diff < compare) {\n            let lastArrEl = colorDiffArr[lastI],\n                lastRGB = lastArrEl[1],\n                currRGB = color[1],\n                newRGB = {r: currRGB.r + lastRGB.r, g : currRGB.g + lastRGB.g, b : currRGB.b + lastRGB.b};\n            \n            updateArr[0] = lastArrEl[0];\n            updateArr[1] = newRGB;\n            updateArr[2] = lastArrEl[2] + 1;\n            colorDiffArr[lastI] = updateArr;\n        }\n        else {\n          lastI = i;\n          compare = diff + tolerance;\n        }\n      }\n    })\n    compare = 0\n    let newArr = colorDiffArr.filter((el,i,arr) => {\n      let ocurr = el[2],\n          imgArea = w * h,\n          rel = (ocurr * 100) / imgArea;\n      if (rel > 1) {\n        let avRGB = `${Math.floor(el[1].r / ocurr)},${Math.floor(el[1].g / ocurr)},${Math.floor(el[1].b / ocurr)}`;\n            \n        if (i>0) {\n            let diff = Math.floor(el[0]);\n            if (!(diff < compare)) {\n                el[1] = avRGB;\n                compare = diff + tolerance; \n                return el\n            }\n          }\n          else {\n              el[1] = avRGB;\n              return el\n          } \n      }\n    });\n    newArr.sort((a,b) => {\n      if (a[2] < b[2])\n          return 1;\n      if (a[2] > b[2])\n          return -1\n    });\n    setcolors(newArr);\n    setLoading(false);\n  }\n  \n  return (\n    <div>\n      <nav>\n        <div className=\"title\">\n          <p> Try one of these images</p>\n        </div>\n        <div className=\"images\">\n        {\n          imgArr.map((src) => {\n              return (\n                <div>\n                    <img src={src} onClick={(event) => getImageData(event.target)} crossOrigin=\"anonymous\"/>\n                </div>\n              )\n          }) \n        }\n        </div>\n      </nav>\n      <div className={`main ${loading ? `loading` : ''} `}>\n        <h1>Image color pallete</h1>\n        <div className='range'>\n        </div>\n        <div className='loading'>\n          <div></div>\n          <div></div>\n        </div>\n        <div className=\"input\">\n          <p>... or upload your own</p>\n          <img src=\"\" class=\"img\"/>\n          <input type=\"file\" id=\"file\" accept=\"image/*\" onChange={fromInput}/>\n          <label for=\"file\">Choose a file</label>\n        </div>\n        <canvas></canvas>\n        <div>\n          {\n            colors.map((img, i) => {\n              return <div data-rgb={img[1]} style={{background : `rgb(${img[1]})`}}> </div>\n            })\n           }\n        </div>\n      </div>\n     </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}